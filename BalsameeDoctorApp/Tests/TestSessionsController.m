//
//  BalsameeDoctorApp
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
//
#import <XCTest/XCTest.h>
#import "SessionsController.h"
#import "TestHelper.h"
#import "TestBaseController.h"

@interface  TestSessionsController : TestBaseController
//Controller instance for all tests
@property SessionsController* controller;
@end 


@implementation  TestSessionsController : TestBaseController

//Setup test class
//This method is called before the invocation of each test method in the test class
- (void)setUp {
    [super setUp];
    self.controller = [[SessionsController alloc]init];
}

//Teardown test class
//This method is called after the invocation of each test method in the test class
- (void)tearDown {
    [super tearDown];
}	


// TODO: Add Description    
-(void) testLogOut {
    //Set up test expectations
    XCTestExpectation *expectation =[self expectationWithDescription:@"High Expectations"];
    // Parameters for the API call
    NSString* xAuthenticationToken = @"{{token}}";
    NSString* xSessionId = @"{{session_id}}";
    NSString* xAppId = @"doctor-app";
    NSString* doctorInformationIsAvailable = @"true";
    NSString* doctorInformationLang = @"en";
    NSString* doctorInformationLatitude = @"1";
    NSString* doctorInformationLongitude = @"1";

    // Set callback and perform API call
    [self.controller updateLogOutAsyncWithXAuthenticationToken: xAuthenticationToken xSessionId : xSessionId xAppId : xAppId doctorInformationIsAvailable : doctorInformationIsAvailable doctorInformationLang : doctorInformationLang doctorInformationLatitude : doctorInformationLatitude doctorInformationLongitude : doctorInformationLongitude  completionBlock:^(BOOL success, HttpContext* context, NSError* error) { 
       // Test response code
        XCTAssertEqual(200, context.response.statusCode);
        

        [expectation fulfill];
    }];
    [self wait];
}

// Doctor App log out    
-(void) testLogout {
    //Set up test expectations
    XCTestExpectation *expectation =[self expectationWithDescription:@"High Expectations"];
    // Parameters for the API call
    NSString* xAuthenticationToken = @"{{token}}";
    NSString* xSessionId = @"{{session_id}}";

    // Set callback and perform API call
    [self.controller deleteLogoutAsyncWithXAuthenticationToken: xAuthenticationToken xSessionId : xSessionId  completionBlock:^(BOOL success, HttpContext* context, NSError* error) { 
       // Test response code
        XCTAssertEqual(200, context.response.statusCode);
        

        [expectation fulfill];
    }];
    [self wait];
}

// TODO: Add Description    
-(void) testSaveSessionDeviceToken {
    //Set up test expectations
    XCTestExpectation *expectation =[self expectationWithDescription:@"High Expectations"];
    // Parameters for the API call
    NSString* xAuthenticationToken = @"{{token}}";
    NSString* xSessionId = @"{{session_id}}";
    NSString* deviceToken = @"f9ddda083107a9c6b21fb48815532aa71867c23e731951463e4e35cb806c052d";

    // Set callback and perform API call
    [self.controller updateSaveSessionDeviceTokenAsyncWithXAuthenticationToken: xAuthenticationToken xSessionId : xSessionId deviceToken : deviceToken  completionBlock:^(BOOL success, HttpContext* context, NSError* error) { 
       // Test response code
        XCTAssertEqual(200, context.response.statusCode);
        

        [expectation fulfill];
    }];
    [self wait];
}

// Get individual with more details 
//1 - reservation_request    
-(void) testGetUserDetails {
    //Set up test expectations
    XCTestExpectation *expectation =[self expectationWithDescription:@"High Expectations"];
    // Parameters for the API call
    NSString* xAuthenticationToken = @"{{token}}";
    NSString* xSessionId = @"{{session_id}}";

    // Set callback and perform API call
    [self.controller getUserDetailsAsyncWithXAuthenticationToken: xAuthenticationToken xSessionId : xSessionId  completionBlock:^(BOOL success, HttpContext* context, NSError* error) { 
       // Test response code
        XCTAssertEqual(200, context.response.statusCode);
        

        [expectation fulfill];
    }];
    [self wait];
}



@end
