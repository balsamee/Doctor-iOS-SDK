//
//  BalsameeDoctorApp
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
//
#import <XCTest/XCTest.h>
#import "LiveStreamingController.h"
#import "TestHelper.h"
#import "TestBaseController.h"

@interface  TestLiveStreamingController : TestBaseController
//Controller instance for all tests
@property LiveStreamingController* controller;
@end 


@implementation  TestLiveStreamingController : TestBaseController

//Setup test class
//This method is called before the invocation of each test method in the test class
- (void)setUp {
    [super setUp];
    self.controller = [[LiveStreamingController alloc]init];
}

//Teardown test class
//This method is called after the invocation of each test method in the test class
- (void)tearDown {
    [super tearDown];
}	


// TODO: Add Description    
-(void) testStopBroadcast {
    //Set up test expectations
    XCTestExpectation *expectation =[self expectationWithDescription:@"High Expectations"];

    // Set callback and perform API call
    [self.controller updateStopBroadcastWithCompletionBlock:  ^(BOOL success, HttpContext* context, NSError* error) { 
       // Test response code
        XCTAssertEqual(200, context.response.statusCode);
        

        [expectation fulfill];
    }];
    [self wait];
}

// TODO: Add Description    
-(void) testStartBraodcast {
    //Set up test expectations
    XCTestExpectation *expectation =[self expectationWithDescription:@"High Expectations"];

    // Set callback and perform API call
    [self.controller updateStartBraodcastWithCompletionBlock:  ^(BOOL success, HttpContext* context, NSError* error) { 
       // Test response code
        XCTAssertEqual(200, context.response.statusCode);
        

        [expectation fulfill];
    }];
    [self wait];
}

// TODO: Add Description    
-(void) testCeateAComment {
    //Set up test expectations
    XCTestExpectation *expectation =[self expectationWithDescription:@"High Expectations"];
    // Parameters for the API call
    NSString* xAuthenticationToken = @"{{token}}";
    NSString* xSessionId = @"{{session_id}}";
    NSString* commentBody = @"7amada";

    // Set callback and perform API call
    [self.controller createCeateACommentAsyncWithXAuthenticationToken: xAuthenticationToken xSessionId : xSessionId commentBody : commentBody  completionBlock:^(BOOL success, HttpContext* context, NSError* error) { 
       // Test response code
        XCTAssertEqual(200, context.response.statusCode);
        

        [expectation fulfill];
    }];
    [self wait];
}

// TODO: Add Description    
-(void) testGetActiveLiveStreamingDetails {
    //Set up test expectations
    XCTestExpectation *expectation =[self expectationWithDescription:@"High Expectations"];
    // Parameters for the API call
    NSString* xAuthenticationToken = @"{{token}}";
    NSString* xSessionId = @"{{session_id}}";

    // Set callback and perform API call
    [self.controller getActiveLiveStreamingDetailsAsyncWithXAuthenticationToken: xAuthenticationToken xSessionId : xSessionId  completionBlock:^(BOOL success, HttpContext* context, NSError* error) { 
       // Test response code
        XCTAssertEqual(200, context.response.statusCode);
        

        [expectation fulfill];
    }];
    [self wait];
}

// TODO: Add Description    
-(void) testLikeLiveStream1 {
    //Set up test expectations
    XCTestExpectation *expectation =[self expectationWithDescription:@"High Expectations"];
    // Parameters for the API call
    NSString* xAuthenticationToken = @"{{token}}";
    NSString* xSessionId = @"{{session_id}}";

    // Set callback and perform API call
    [self.controller deleteLikeLiveStreamAsyncWithXAuthenticationToken: xAuthenticationToken xSessionId : xSessionId  completionBlock:^(BOOL success, HttpContext* context, NSError* error) { 
       // Test response code
        XCTAssertEqual(200, context.response.statusCode);
        

        [expectation fulfill];
    }];
    [self wait];
}

// TODO: Add Description    
-(void) testLikeLiveStream {
    //Set up test expectations
    XCTestExpectation *expectation =[self expectationWithDescription:@"High Expectations"];
    // Parameters for the API call
    NSString* xAuthenticationToken = @"{{token}}";
    NSString* xSessionId = @"{{session_id}}";

    // Set callback and perform API call
    [self.controller createLikeLiveStreamAsyncWithXAuthenticationToken: xAuthenticationToken xSessionId : xSessionId  completionBlock:^(BOOL success, HttpContext* context, NSError* error) { 
       // Test response code
        XCTAssertEqual(200, context.response.statusCode);
        

        [expectation fulfill];
    }];
    [self wait];
}



@end
